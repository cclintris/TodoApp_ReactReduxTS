{"ast":null,"code":"import { DELETE_TODO, SET_TODOS, SET_NEWTODO, UPDATE_TODO, ADD_TODO, TOGGLE_TODO } from \"./actions\";\nexport const updateTodo = (todos, id, text) => todos.map(todo => ({ ...todo,\n  text: todo.id === id ? text : todo.text\n}));\nexport const toggleTodo = (todos, id) => todos.map(todo => ({ ...todo,\n  done: todo.id === id ? !todo.done : todo.done\n}));\nexport const deleteTodo = (todos, id) => todos.filter(todo => todo.id !== id);\nexport const addTodo = (todos, text) => [...todos, {\n  id: Math.max(0, Math.max(...todos.map(({\n    id\n  }) => id))) + 1,\n  text,\n  done: false\n}]; // Redux reducer\n\nexport function todoReducer(state = {\n  todos: [],\n  newTodo: \"\"\n}, action) {\n  switch (action.type) {\n    case SET_TODOS:\n      return { ...state,\n        todos: action.payload\n      };\n\n    case DELETE_TODO:\n      return { ...state,\n        todos: deleteTodo(state.todos, action.payload)\n      };\n\n    case SET_NEWTODO:\n      return { ...state,\n        newTodo: action.payload\n      };\n\n    case UPDATE_TODO:\n      return { ...state,\n        todos: updateTodo(state.todos, action.payload.id, action.payload.text)\n      };\n\n    case ADD_TODO:\n      return { ...state,\n        newTodo: \"\",\n        todos: addTodo(state.todos, state.newTodo)\n      };\n\n    case TOGGLE_TODO:\n      return { ...state,\n        todos: toggleTodo(state.todos, action.payload)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/cclin/Documents/React/todo-base/src/store/reducers.ts"],"names":["DELETE_TODO","SET_TODOS","SET_NEWTODO","UPDATE_TODO","ADD_TODO","TOGGLE_TODO","updateTodo","todos","id","text","map","todo","toggleTodo","done","deleteTodo","filter","addTodo","Math","max","todoReducer","state","newTodo","action","type","payload"],"mappings":"AAAA,SAEEA,WAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,QANF,EAOEC,WAPF,QAQO,WARP;AAWA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAgBC,EAAhB,EAA4BC,IAA5B,KACxBF,KAAK,CAACG,GAAN,CAAWC,IAAD,KAAW,EACnB,GAAGA,IADgB;AAEnBF,EAAAA,IAAI,EAAEE,IAAI,CAACH,EAAL,KAAYA,EAAZ,GAAiBC,IAAjB,GAAwBE,IAAI,CAACF;AAFhB,CAAX,CAAV,CADK;AAMP,OAAO,MAAMG,UAAU,GAAG,CAACL,KAAD,EAAgBC,EAAhB,KACxBD,KAAK,CAACG,GAAN,CAAWC,IAAD,KAAW,EACnB,GAAGA,IADgB;AAEnBE,EAAAA,IAAI,EAAEF,IAAI,CAACH,EAAL,KAAYA,EAAZ,GAAiB,CAACG,IAAI,CAACE,IAAvB,GAA8BF,IAAI,CAACE;AAFtB,CAAX,CAAV,CADK;AAMP,OAAO,MAAMC,UAAU,GAAG,CAACP,KAAD,EAAgBC,EAAhB,KACxBD,KAAK,CAACQ,MAAN,CAAcJ,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAAnC,CADK;AAGP,OAAO,MAAMQ,OAAO,GAAG,CAACT,KAAD,EAAgBE,IAAhB,KAAyC,CAC9D,GAAGF,KAD2D,EAE9D;AACEC,EAAAA,EAAE,EAAES,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACC,GAAL,CAAS,GAAGX,KAAK,CAACG,GAAN,CAAU,CAAC;AAAEF,IAAAA;AAAF,GAAD,KAAYA,EAAtB,CAAZ,CAAZ,IAAsD,CAD5D;AAEEC,EAAAA,IAFF;AAGEI,EAAAA,IAAI,EAAE;AAHR,CAF8D,CAAzD,C,CASP;;AACA,OAAO,SAASM,WAAT,CACLC,KAAY,GAAG;AAAEb,EAAAA,KAAK,EAAE,EAAT;AAAac,EAAAA,OAAO,EAAE;AAAtB,CADV,EAELC,MAFK,EAGL;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKtB,SAAL;AACE,aAAO,EACL,GAAGmB,KADE;AAELb,QAAAA,KAAK,EAAEe,MAAM,CAACE;AAFT,OAAP;;AAIF,SAAKxB,WAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELb,QAAAA,KAAK,EAAEO,UAAU,CAACM,KAAK,CAACb,KAAP,EAAce,MAAM,CAACE,OAArB;AAFZ,OAAP;;AAIF,SAAKtB,WAAL;AACE,aAAO,EACL,GAAGkB,KADE;AAELC,QAAAA,OAAO,EAAEC,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKrB,WAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELb,QAAAA,KAAK,EAAED,UAAU,CAACc,KAAK,CAACb,KAAP,EAAce,MAAM,CAACE,OAAP,CAAehB,EAA7B,EAAiCc,MAAM,CAACE,OAAP,CAAef,IAAhD;AAFZ,OAAP;;AAIF,SAAKL,QAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELC,QAAAA,OAAO,EAAE,EAFJ;AAGLd,QAAAA,KAAK,EAAES,OAAO,CAACI,KAAK,CAACb,KAAP,EAAca,KAAK,CAACC,OAApB;AAHT,OAAP;;AAKF,SAAKhB,WAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELb,QAAAA,KAAK,EAAEK,UAAU,CAACQ,KAAK,CAACb,KAAP,EAAce,MAAM,CAACE,OAArB;AAFZ,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAjCJ;AAmCD","sourcesContent":["import {\n  ActionTypes,\n  DELETE_TODO,\n  SET_TODOS,\n  SET_NEWTODO,\n  UPDATE_TODO,\n  ADD_TODO,\n  TOGGLE_TODO,\n} from \"./actions\";\nimport { Store, Todo } from \"./types\";\n\nexport const updateTodo = (todos: Todo[], id: number, text: string): Todo[] =>\n  todos.map((todo) => ({\n    ...todo,\n    text: todo.id === id ? text : todo.text,\n  }));\n\nexport const toggleTodo = (todos: Todo[], id: number): Todo[] =>\n  todos.map((todo) => ({\n    ...todo,\n    done: todo.id === id ? !todo.done : todo.done,\n  }));\n\nexport const deleteTodo = (todos: Todo[], id: number): Todo[] =>\n  todos.filter((todo) => todo.id !== id);\n\nexport const addTodo = (todos: Todo[], text: string): Todo[] => [\n  ...todos,\n  {\n    id: Math.max(0, Math.max(...todos.map(({ id }) => id))) + 1,\n    text,\n    done: false,\n  },\n];\n\n// Redux reducer\nexport function todoReducer(\n  state: Store = { todos: [], newTodo: \"\" },\n  action: ActionTypes\n) {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: deleteTodo(state.todos, action.payload),\n      };\n    case SET_NEWTODO:\n      return {\n        ...state,\n        newTodo: action.payload,\n      };\n    case UPDATE_TODO:\n      return {\n        ...state,\n        todos: updateTodo(state.todos, action.payload.id, action.payload.text),\n      };\n    case ADD_TODO:\n      return {\n        ...state,\n        newTodo: \"\",\n        todos: addTodo(state.todos, state.newTodo),\n      };\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todos: toggleTodo(state.todos, action.payload),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}